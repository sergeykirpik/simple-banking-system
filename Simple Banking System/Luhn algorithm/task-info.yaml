type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    import java.util.Scanner;

    public class Main {
        private static final int CREATE_ACCOUNT = 1;
        private static final int LOG_INTO_ACCOUNT = 2;

        private static final int SHOW_BALANCE = 1;
        private static final int LOG_OUT = 2;

        private static final int EXIT = 0;

        private static final Scanner scanner = new Scanner(System.in);

        public static void main(String[] args) {
            BankingSystem bankingSystem = new BankingSystem();
            BankingClient bankingClient = new BankingClient(bankingSystem);
            //noinspection InfiniteLoopStatement
            while (true) {
                if (bankingClient.isLoggedIn()) {
                    loggedInMenu(bankingClient);
                } else {
                    mainMenu(bankingClient);
                }
                System.out.println();
            }
        }

        private static void mainMenu(BankingClient bankingClient) {
            System.out.println("1. Create an account");
            System.out.println("2. Log into account");
            System.out.println("0. Exit");
            int command = Integer.parseInt(scanner.nextLine());
            switch (command) {
                case CREATE_ACCOUNT:
                    bankingClient.createAccount();
                    break;
                case LOG_INTO_ACCOUNT:
                    bankingClient.logIntoAccount();
                    break;
                case EXIT:
                    System.exit(0);
            }
        }

        private static void loggedInMenu(BankingClient bankingClient) {
            System.out.println("1. Balance");
            System.out.println("2. Log out");
            System.out.println("0. Exit");
            int command = Integer.parseInt(scanner.nextLine());
            switch (command) {
                case SHOW_BALANCE:
                    bankingClient.showBalance();
                    break;
                case LOG_OUT:
                    bankingClient.logOut();
                    break;
                case EXIT:
                    System.exit(0);
            }
        }
    }
  learner_created: false
- name: src/banking/Command.java
  visible: true
  text: |
    package banking;

    public enum Command {
        CREATE_ACCOUNT,
        LOG_INTO_ACCOUNT,
        GET_BALANCE,
        LOG_OUT
    }
  learner_created: false
- name: src/banking/CreditCard.java
  visible: true
  text: |
    package banking;

    import java.util.Objects;

    public class CreditCard {

        private final String number;
        private final String pin;

        public CreditCard(String number, String pin) {
            this.number = number;
            this.pin = pin;
        }

        public String getNumber() {
            return number;
        }

        public boolean checkPin(String pin) {
            return Objects.equals(this.pin, pin);
        }

        @Override
        public String toString() {
            return "CreditCard{" +
            "number='" + number + '\'' +
            ", pin='" + pin + '\'' +
            '}';
        }
    }
  learner_created: false
- name: src/banking/BankingSystem.java
  visible: true
  text: |
    package banking;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;

    public class BankingSystem {

        private static final Random randomGen = new Random();
        private static final String BIN = "400000";
        private static final int ACCOUNT_NUMBER_LENGTH = 9;
        private static final int PIN_LENGTH = 4;

        private final Map<String, Account> accounts = new HashMap<>();

        public OperationResult createAccount() {
            String accountNumber = generateAccountNumber();
            while (accounts.containsKey(accountNumber)) {
                accountNumber = generateAccountNumber();
            }
            String cardNumber = generateCardNumber(accountNumber);
            String pin = generatePin();
            CreditCard creditCard = new CreditCard(cardNumber, pin);
            Account account = new Account(creditCard);
            accounts.put(accountNumber, account);

            String statusText =
                "Your card has been created\n" +
                "Your card number:\n" +
                cardNumber + '\n' +
                "Your card PIN:\n" +
                pin + '\n'
            ;
            return new OperationResult(Status.SUCCESS, statusText);
        }

        public LoginOperationResult login(String creditCardNumber, String pin) {
            String accountNumber = Account.extractAccountNumber(creditCardNumber);
            if (!accounts.containsKey(accountNumber)) {
                return LoginOperationResult.failure("Wrong card number or PIN!");
            }
            Account account = accounts.get(accountNumber);
            account.logIn(pin);
            if (!account.isLoggedIn()) {
                return LoginOperationResult.failure("Wrong card number or PIN!");
            }
            return LoginOperationResult.success(account);
        }

        private static String generateCardNumber(String accountNumber) {
            String checksum = generateChecksum();
            return String.format("%s%s%s", BIN, accountNumber, checksum);
        }

        private String generateAccountNumber() {
            return generateSequence(ACCOUNT_NUMBER_LENGTH);
        }

        private String generatePin() {
            return generateSequence(PIN_LENGTH);
        }

        private static String generateChecksum() {
            return generateSequence(1);
        }

        private static String generateSequence(int length) {
            char[] sequence = new char[length];
            for (int i = 0; i < length; i++) {
                sequence[i] = (char) ('0' + randomGen.nextInt(10));
            }
            return new String(sequence);
        }

    }
  learner_created: false
- name: src/banking/Account.java
  visible: true
  text: |-
    package banking;

    public class Account {

        private final String accountNumber;
        private final CreditCard creditCard;
        private boolean loggedIn = false;
        private int balance = 0;

        public Account(CreditCard creditCard) {
            this.accountNumber = extractAccountNumber(creditCard);
            this.creditCard = creditCard;
        }

        public static String extractAccountNumber(CreditCard creditCard) {
            return extractAccountNumber(creditCard.getNumber());
        }

        public static String extractAccountNumber(String creditCardNumber) {
            return creditCardNumber.substring(6, 15);
        }

        public boolean isLoggedIn() {
            return loggedIn;
        }

        public void logIn(String pin) {
            if (creditCard.checkPin(pin)) {
                setLoggedIn(true);
            }
        }

        public void logOut() {
            setLoggedIn(false);
        }

        private void setLoggedIn(boolean loggedIn) {
            this.loggedIn = loggedIn;
        }

        public int getBalance() {
            if (!isLoggedIn()) {
                throw new RuntimeException("Access denied!");
            }
            return balance;
        }

        @Override
        public String toString() {
            return "Account{" +
            "accountNumber='" + accountNumber + '\'' +
            ", creditCard=" + creditCard +
            ", loggedIn=" + loggedIn +
            ", balance=" + balance +
            '}'+'\n';
        }
    }
  learner_created: false
- name: src/banking/OperationResult.java
  visible: true
  text: |
    package banking;

    public class OperationResult {
        public final Status status;
        public final String statusText;

        public OperationResult(Status status, String statusText) {
            this.status = status;
            this.statusText = statusText;
        }

        public boolean success() {
            return status == Status.SUCCESS;
        }

        public boolean failure() {
            return status == Status.FAILURE;
        }
    }
  learner_created: false
- name: src/banking/Status.java
  visible: true
  text: |
    package banking;

    public enum Status {
        SUCCESS, FAILURE
    }
  learner_created: false
- name: src/banking/LoginOperationResult.java
  visible: true
  text: |
    package banking;

    public class LoginOperationResult extends OperationResult {

        public final Account account;

        public LoginOperationResult(Status status, String statusText, Account account) {
            super(status, statusText);
            this.account = account;
        }

        public static LoginOperationResult failure(String error) {
            return new LoginOperationResult(Status.FAILURE, error, null);
        }

        public static LoginOperationResult success(Account account) {
            return new LoginOperationResult(Status.SUCCESS, "success", account);
        }
    }
  learner_created: false
- name: src/banking/BankingClient.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class BankingClient {

        private static final Scanner scanner = new Scanner(System.in);
        private final BankingSystem bankingSystem;

        private Account currentAccount = null;

        public BankingClient(BankingSystem bankingSystem) {
            this.bankingSystem = bankingSystem;
        }

        public void createAccount() {
            OperationResult res = bankingSystem.createAccount();
            if (res.failure()) {
                throw new RuntimeException("Something went wrong...");
            }
            System.out.println();
            System.out.print(res.statusText);
        }

        public void logIntoAccount() {
            System.out.println();
            System.out.println("Enter your card number:");
            String creditCardNumber = scanner.nextLine();
            System.out.println("Enter your PIN:");
            String pin = scanner.nextLine();
            LoginOperationResult res = bankingSystem.login(creditCardNumber, pin);
            if (res.failure()) {
                System.out.println(res.statusText);
                return;
            }
            setCurrentAccount(res.account);
            System.out.println();
            System.out.println("You have successfully logged in!");
        }

        public boolean isLoggedIn() {
            return currentAccount != null && currentAccount.isLoggedIn();
        }

        public void logOut() {
            if (!isLoggedIn()) {
                throw new RuntimeException("Account must be logged in!");
            }
            currentAccount.logOut();
            currentAccount = null;
            System.out.println();
            System.out.println("You have successfully logged out!");
        }

        public void showBalance() {
            if (!isLoggedIn()) {
                throw new RuntimeException("Account must be logged in!");
            }
            System.out.println();
            System.out.println("Balance: " + currentAccount.getBalance());
        }

        private void setCurrentAccount(Account account) {
            if (!account.isLoggedIn()) {
                throw new RuntimeException("Account must be logged in!");
            }
            currentAccount = account;
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import banking.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTestingMethod
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesn’t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Luhn.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
record: 1
